from enum import IntEnum, EnumMeta, Enum


class PacketType(IntEnum):
    """
    Enumeration representing different packet types for the screen capture application.
    """
    VIDEO_DATA = 1
    MOUSE_CLICK = 2
    MOUSE_MOVE = 3
    KEYBOARD_EVENT = 4
    # Add more packet types as needed


class MouseButton(IntEnum):
    """
    Enumeration representing different mouse button identifiers.
    """
    LEFT = 0x01
    MIDDLE_UP = 0x02
    MIDDLE_DOWN = 0x03
    RIGHT = 0x04


class ButtonState(IntEnum):
    """
    Enumeration representing the state of a button (pressed or released).
    """
    PRESS = 0x01
    RELEASE = 0x00


class ASCIIEnumMeta(EnumMeta):
    """
    Custom metaclass to generate an ASCII character enumeration during class creation.
    """

    def __new__(mcs, name, bases, dct):
        temp_enum = {}
        for i in range(128):
            char_name = f"CHAR_{chr(i)}"
            temp_enum[char_name] = i
        new_class = super().__new__(mcs, name, bases, dct)
        for key, value in temp_enum.items():
            new_class._member_map_[key] = value
            new_class._value2member_map_[value] = value
            new_class._member_names_.append(key)
            new_class._member_type_ = int
        return new_class


class ASCIIEnum(IntEnum, metaclass=ASCIIEnumMeta):
    """
    Enumeration representing ASCII characters.
    Automatically populated with ASCII character codes using the ASCIIEnumMeta metaclass.
    """
    pass


class ResolutionMeta(EnumMeta):
    def __init__(cls, name, bases, dct):
        super().__init__(name, bases, dct)

    def __new__(mcs, cls, bases, dct):
        aspect_ratios = [
            (4, 3),
            (16, 9),
            (16, 10),
        ]
        heights = [480, 576, 600, 648, 720, 768, 800, 900, 960, 1080, 1200, 1440, 2160]

        i = 1
        for aspect_width, aspect_height in aspect_ratios:
            for height in heights:
                width = int(height * aspect_width / aspect_height)
                dct[f"{width}x{height}"] = (width, height)
                i += 1

        return super().__new__(mcs, cls, bases, dct)


class Resolution(Enum, metaclass=ResolutionMeta):
    """
    An enumeration representing video resolutions.

    This enumeration is generated by the ResolutionMeta metaclass, which creates
    enum members for various video resolutions and aspect ratios available in the market.
    """

    def __str__(self):
        return f"{self.width}x{self.height}"

    @property
    def width(self):
        return self.value[0]

    @property
    def height(self):
        return self.value[1]
